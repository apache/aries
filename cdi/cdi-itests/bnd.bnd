Bundle-Description: Integration Test bundle for the CDI Extender
Export-Package: ${p}.cases.*,${p}.interfaces.*
Test-Cases: \
	${classes;CONCRETE;EXTENDS;${p}.cases.AbstractTestCase},\
	${classes;CONCRETE;ANNOTATED;org.junit.Test}

##
## All of remainder is to make bnd's `-make` function work in our maven project.
##

# We need to define a root package so we can split the classpath contents into many `sub-bundles`.
p = org.apache.aries.cdi.test

# We need to tell bnd's make function what the classpath is for making `sub-bundles`.
-classpath: target/classes

# This is the instruction containing the make recipe and the recipe dir pattern for finding the bnd files.
-make: (*).(jar); type=bnd; recipe="${.}/bnd/$1.bnd"

# Finally, include the `-make'd` jars in the test bundle. This also happens to trigger the make function
# so don't forget to list new jars here as new bnd files are added into the recipe dir.
-includeresource:\
	basic-beans.jar,\
	services-one.jar,\
	tb1.jar,\
	tb2.jar

# Don't forget that we had to coax the `maven-jar-plugin` NOT to include the `sub-bundle` packages in
# the root bundle:
#
# 				<artifactId>maven-jar-plugin</artifactId>
#				<configuration>
#					<includes>
#						<include>META-INF/*</include>
#						<include>OSGI-INF/*</include>
#						<include>OSGI-OPT/*</include>
#						<!-- List all the packages we want to keep in the root bundle. -->
#						<include>org/apache/aries/cdi/test/cases/*</include>
#						<include>org/apache/aries/cdi/test/components/*</include>
#						<!-- Make sure to include all the sub-bundles we created. -->
#						<include>*.jar</include>
#					</includes>
#				</configuration>
